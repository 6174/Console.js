/*!
* Name:    Console.js
* Info:    A simple but useful extension for the JavaScript console with a stack trace and more
* Author:  Gabriel Nahmias (http://terrasoftlabs.com)
* Version: 1.1
*/
; var Console = { settings: { debug: { enabled: true, showInfo: true, trace: true }, stackTrace: { collapsed: true, ignoreDebugFuncs: true, spacing: false}} }; if (!String.prototype.format) { String.prototype.format = function () { var b = this.toString(), a = typeof arguments[0], a = (("string" == a || "number" == a) ? arguments : arguments[0]); if (!arguments.length) { return b } for (arg in a) { b = b.replace(RegExp("\\{" + arg + "\\}", "gi"), a[arg]) } return b } } if (!String.prototype.times) { String.prototype.times = function () { var c = this.toString(), a = "", d = arguments[0]; if (!arguments.length) { return c } for (var b = 0; b < d; b++) { a += c } return a } } Console.debug = function () { var h = ((typeof arguments !== "undefined") ? Array.prototype.slice.call(arguments, 0) : []), e = Console.stackTrace().split("\n"), l = e[2].replace(/(.*):/, "$1@").split("@"), c = "color:black;", j = "color:{0}; font-weight:bold;", a = ""; if (Console.settings.debug.showInfo && !Console.settings.debug.trace) { var f = l[0], g = l[1], b = l[2]; console.info("%cOn line %c{0}%c in %c{1}%c inside the %c{2}%c function:".format(b, g, f), c, j.format("red"), c, j.format("green"), c, j.format("blue"), c) } if (Console.settings.stackTrace.ignoreDebugFuncs) { e.shift(); e.shift() } a = e.join(((Console.settings.stackTrace.spacing) ? "\n\n" : "\n")).trim(); trace = typeof trace !== "undefined" ? trace : true; if (typeof console != "undefined" && Console.settings.debug.enabled == true) { for (var k in h) { console.debug(h[k]) } if (Console.settings.debug.trace) { var d = "color:red; font-weight: bold;", i = "%c Stack Trace" + " ".times(70); if (Console.settings.stackTrace.collapsed) { console.groupCollapsed(i, d) } else { console.group(i, d) } console.debug("%c" + a, "color: #666666; font-style: italic;"); console.groupEnd() } } }; Console.stackTrace = function () { var a = new Error(); return a.stack };